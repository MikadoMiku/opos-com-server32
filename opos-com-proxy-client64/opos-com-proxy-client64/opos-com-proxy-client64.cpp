#include "Oposdevicemanageratl_i.h" // Include the header file generated by your ATL project
#include "Oposdevicemanageratl_i.c"
#include <iostream>
#include <Windows.h>
#include <atlbase.h>
#include <atlcom.h>
#include <string>


class CMyDeviceManagerEvents : public IMyDeviceManagerEvents
{
public:
	STDMETHODIMP OnDataEvent(BSTR data)
	{
		std::wcout << std::endl;
		std::wstring wstrData(data);
		std::wcout << L"Data event received: " << wstrData << std::endl;
		return S_OK;
	}

	STDMETHODIMP OnErrorEvent(BSTR errorMessage)
	{
		std::wstring wstrErrorMessage(errorMessage);
		std::wcerr << L"Error event received: " << wstrErrorMessage << std::endl;
		return S_OK;
	}

	STDMETHODIMP_(ULONG) AddRef() override { return 1; }
	STDMETHODIMP_(ULONG) Release() override { return 1; }

	STDMETHODIMP QueryInterface(REFIID iid, void** ppvObject) override
	{
		if (iid == IID_IUnknown || iid == IID_IMyDeviceManagerEvents)
		{
			*ppvObject = this;
			AddRef();
			return S_OK;
		}
		else
		{
			*ppvObject = NULL;
			return E_NOINTERFACE;
		}
	}
};

int main3() {
	HRESULT hr = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);
	if (FAILED(hr)) {
		std::cerr << "Failed to initialize COM library." << std::endl;
		return 1;
	}

	// Your code to interact with the COM server goes here
	CComPtr<IOposDeviceManager> spDeviceManager;
	hr = spDeviceManager.CoCreateInstance(__uuidof(OposDeviceManager));
	if (FAILED(hr)) {
		std::cerr << "Failed to create an instance of the DeviceManager." << std::endl;
		CoUninitialize();
		return 1;
	}

	// Create an instance of your event handler class
	CMyDeviceManagerEvents eventHandler;

	// Query the COM object for the IConnectionPointContainer interface
	CComPtr<IConnectionPointContainer> spCPC;
	hr = spDeviceManager->QueryInterface(IID_IConnectionPointContainer, (void**)&spCPC);

	// Find the connection point for the IMyDeviceManagerEvents interface
	CComPtr<IConnectionPoint> spCP;
	hr = spCPC->FindConnectionPoint(IID_IMyDeviceManagerEvents, &spCP);

	// Advise the connection point with the event handler object
	DWORD dwCookie;
	hr = spCP->Advise(&eventHandler, &dwCookie);

	// Call a method of your COM server, e.g., StartScanner
	hr = spDeviceManager->StartScanner();
	if (SUCCEEDED(hr)) {
		std::cout << "Scanner started successfully." << std::endl;
	}
	else {
		std::cerr << "Failed to start the scanner." << std::endl;
	}

	std::string input;
	while (true) {
		std::cout << "Enter command (q to quit): ";
		std::getline(std::cin, input);

		if (input == "q") {
			hr = spDeviceManager->StopScanner();
			break;
		}

		// Process the input and call the appropriate methods on the COM server

		// Pump messages to allow COM to marshal calls
		MSG msg;
		while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	// Unadvise the connection point
	hr = spCP->Unadvise(dwCookie);

	CoUninitialize();
	std::cout << "Done." << std::endl;
	return 0;

}

int main() {
	HRESULT hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
	if (FAILED(hr)) {
		std::cerr << "Failed to initialize COM library." << std::endl;
		return 1;
	}

	// Your code to interact with the COM server goes here
	CComPtr<IOposDeviceManager> spDeviceManager;
	hr = spDeviceManager.CoCreateInstance(__uuidof(OposDeviceManager));
	if (FAILED(hr)) {
		std::cerr << "Failed to create an instance of the DeviceManager." << std::endl;
		CoUninitialize();
		return 1;
	}

	// Create an instance of your event handler class
	CMyDeviceManagerEvents eventHandler;

	// Query the COM object for the IConnectionPointContainer interface
	CComPtr<IConnectionPointContainer> spCPC;
	hr = spDeviceManager->QueryInterface(IID_IConnectionPointContainer, (void**)&spCPC);

	// Find the connection point for the IMyDeviceManagerEvents interface
	CComPtr<IConnectionPoint> spCP;
	hr = spCPC->FindConnectionPoint(IID_IMyDeviceManagerEvents, &spCP);

	// Advise the connection point with the event handler object
	DWORD dwCookie;
	hr = spCP->Advise(&eventHandler, &dwCookie);

	// Call a method of your COM server, e.g., StartScanner
	hr = spDeviceManager->StopScanner();
	if (SUCCEEDED(hr)) {
		std::cout << "Scanner stopped successfully." << std::endl;
	}
	else {
		std::cerr << "Failed to stop the scanner." << std::endl;
	}


	// Unadvise the connection point
	hr = spCP->Unadvise(dwCookie);

	CoUninitialize();
	std::cout << "Done." << std::endl;
	return 0;
}


